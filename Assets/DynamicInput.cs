//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/DynamicInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DynamicInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DynamicInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DynamicInput"",
    ""maps"": [
        {
            ""name"": ""Actions"",
            ""id"": ""0327b637-5833-49ee-83ef-2e94cc5ce414"",
            ""actions"": [
                {
                    ""name"": ""LeftHandHorizontalMovement"",
                    ""type"": ""Button"",
                    ""id"": ""1a39e2e9-3eae-4955-a630-8e440ca1e8bc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightHandVerticalMovement"",
                    ""type"": ""Button"",
                    ""id"": ""c34c1e88-411d-40ca-b823-6afe768afd0d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftHandVerticalMovement"",
                    ""type"": ""Button"",
                    ""id"": ""b61ebf22-f7f0-4e38-b180-5212f7f6115e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightHandHorizontalMovement"",
                    ""type"": ""Button"",
                    ""id"": ""e564836c-24ec-4f69-938d-e5ef9543951f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftHandThrowBall"",
                    ""type"": ""Button"",
                    ""id"": ""73a5572f-46ad-4cf7-bb93-7b0734324cbc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightHandThrowBall"",
                    ""type"": ""Button"",
                    ""id"": ""cbeaf8ba-39fb-4a99-8b42-499b39df68e0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Movement"",
                    ""id"": ""e5306284-d3a1-4f08-a018-00d5a42c9697"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftHandHorizontalMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""92fa4891-1125-4865-a9e6-464d92bdc514"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftHandHorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b2b3fd9a-f090-481a-8326-89c410c09c73"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftHandHorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Movement"",
                    ""id"": ""9868c468-f7bc-4b05-b8de-2f16e6dc8300"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightHandHorizontalMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c5ef55ee-4cd5-401a-94a8-da5593275d77"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightHandHorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""03067407-5fd5-4660-a577-917b99b4f801"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightHandHorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Movement"",
                    ""id"": ""4c1601a8-0200-4cad-b582-b46b6814a84e"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftHandVerticalMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""7718fad3-a34a-4788-8bc3-bbb2eacd5932"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftHandVerticalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""c867a47d-940e-4ee4-aad9-10f37559ab86"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftHandVerticalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Movement"",
                    ""id"": ""7600bbf1-c6bc-4f19-b9d8-74bf85e9bc1d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightHandVerticalMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""fbabc5f6-056f-46ef-abdb-2e4b3d7bf2b0"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightHandVerticalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e1f155c1-cb01-464e-8ff4-ebe85e44cfb8"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightHandVerticalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""88dbc561-f095-4c80-b136-c6e4ea323d2d"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftHandThrowBall"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""19ecf217-c28a-4954-91de-da43ae56081c"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightHandThrowBall"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Actions
        m_Actions = asset.FindActionMap("Actions", throwIfNotFound: true);
        m_Actions_LeftHandHorizontalMovement = m_Actions.FindAction("LeftHandHorizontalMovement", throwIfNotFound: true);
        m_Actions_RightHandVerticalMovement = m_Actions.FindAction("RightHandVerticalMovement", throwIfNotFound: true);
        m_Actions_LeftHandVerticalMovement = m_Actions.FindAction("LeftHandVerticalMovement", throwIfNotFound: true);
        m_Actions_RightHandHorizontalMovement = m_Actions.FindAction("RightHandHorizontalMovement", throwIfNotFound: true);
        m_Actions_LeftHandThrowBall = m_Actions.FindAction("LeftHandThrowBall", throwIfNotFound: true);
        m_Actions_RightHandThrowBall = m_Actions.FindAction("RightHandThrowBall", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Actions
    private readonly InputActionMap m_Actions;
    private List<IActionsActions> m_ActionsActionsCallbackInterfaces = new List<IActionsActions>();
    private readonly InputAction m_Actions_LeftHandHorizontalMovement;
    private readonly InputAction m_Actions_RightHandVerticalMovement;
    private readonly InputAction m_Actions_LeftHandVerticalMovement;
    private readonly InputAction m_Actions_RightHandHorizontalMovement;
    private readonly InputAction m_Actions_LeftHandThrowBall;
    private readonly InputAction m_Actions_RightHandThrowBall;
    public struct ActionsActions
    {
        private @DynamicInput m_Wrapper;
        public ActionsActions(@DynamicInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftHandHorizontalMovement => m_Wrapper.m_Actions_LeftHandHorizontalMovement;
        public InputAction @RightHandVerticalMovement => m_Wrapper.m_Actions_RightHandVerticalMovement;
        public InputAction @LeftHandVerticalMovement => m_Wrapper.m_Actions_LeftHandVerticalMovement;
        public InputAction @RightHandHorizontalMovement => m_Wrapper.m_Actions_RightHandHorizontalMovement;
        public InputAction @LeftHandThrowBall => m_Wrapper.m_Actions_LeftHandThrowBall;
        public InputAction @RightHandThrowBall => m_Wrapper.m_Actions_RightHandThrowBall;
        public InputActionMap Get() { return m_Wrapper.m_Actions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionsActions set) { return set.Get(); }
        public void AddCallbacks(IActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_ActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ActionsActionsCallbackInterfaces.Add(instance);
            @LeftHandHorizontalMovement.started += instance.OnLeftHandHorizontalMovement;
            @LeftHandHorizontalMovement.performed += instance.OnLeftHandHorizontalMovement;
            @LeftHandHorizontalMovement.canceled += instance.OnLeftHandHorizontalMovement;
            @RightHandVerticalMovement.started += instance.OnRightHandVerticalMovement;
            @RightHandVerticalMovement.performed += instance.OnRightHandVerticalMovement;
            @RightHandVerticalMovement.canceled += instance.OnRightHandVerticalMovement;
            @LeftHandVerticalMovement.started += instance.OnLeftHandVerticalMovement;
            @LeftHandVerticalMovement.performed += instance.OnLeftHandVerticalMovement;
            @LeftHandVerticalMovement.canceled += instance.OnLeftHandVerticalMovement;
            @RightHandHorizontalMovement.started += instance.OnRightHandHorizontalMovement;
            @RightHandHorizontalMovement.performed += instance.OnRightHandHorizontalMovement;
            @RightHandHorizontalMovement.canceled += instance.OnRightHandHorizontalMovement;
            @LeftHandThrowBall.started += instance.OnLeftHandThrowBall;
            @LeftHandThrowBall.performed += instance.OnLeftHandThrowBall;
            @LeftHandThrowBall.canceled += instance.OnLeftHandThrowBall;
            @RightHandThrowBall.started += instance.OnRightHandThrowBall;
            @RightHandThrowBall.performed += instance.OnRightHandThrowBall;
            @RightHandThrowBall.canceled += instance.OnRightHandThrowBall;
        }

        private void UnregisterCallbacks(IActionsActions instance)
        {
            @LeftHandHorizontalMovement.started -= instance.OnLeftHandHorizontalMovement;
            @LeftHandHorizontalMovement.performed -= instance.OnLeftHandHorizontalMovement;
            @LeftHandHorizontalMovement.canceled -= instance.OnLeftHandHorizontalMovement;
            @RightHandVerticalMovement.started -= instance.OnRightHandVerticalMovement;
            @RightHandVerticalMovement.performed -= instance.OnRightHandVerticalMovement;
            @RightHandVerticalMovement.canceled -= instance.OnRightHandVerticalMovement;
            @LeftHandVerticalMovement.started -= instance.OnLeftHandVerticalMovement;
            @LeftHandVerticalMovement.performed -= instance.OnLeftHandVerticalMovement;
            @LeftHandVerticalMovement.canceled -= instance.OnLeftHandVerticalMovement;
            @RightHandHorizontalMovement.started -= instance.OnRightHandHorizontalMovement;
            @RightHandHorizontalMovement.performed -= instance.OnRightHandHorizontalMovement;
            @RightHandHorizontalMovement.canceled -= instance.OnRightHandHorizontalMovement;
            @LeftHandThrowBall.started -= instance.OnLeftHandThrowBall;
            @LeftHandThrowBall.performed -= instance.OnLeftHandThrowBall;
            @LeftHandThrowBall.canceled -= instance.OnLeftHandThrowBall;
            @RightHandThrowBall.started -= instance.OnRightHandThrowBall;
            @RightHandThrowBall.performed -= instance.OnRightHandThrowBall;
            @RightHandThrowBall.canceled -= instance.OnRightHandThrowBall;
        }

        public void RemoveCallbacks(IActionsActions instance)
        {
            if (m_Wrapper.m_ActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_ActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ActionsActions @Actions => new ActionsActions(this);
    public interface IActionsActions
    {
        void OnLeftHandHorizontalMovement(InputAction.CallbackContext context);
        void OnRightHandVerticalMovement(InputAction.CallbackContext context);
        void OnLeftHandVerticalMovement(InputAction.CallbackContext context);
        void OnRightHandHorizontalMovement(InputAction.CallbackContext context);
        void OnLeftHandThrowBall(InputAction.CallbackContext context);
        void OnRightHandThrowBall(InputAction.CallbackContext context);
    }
}
